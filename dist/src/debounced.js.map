{"version":3,"file":"debounced.js","sourceRoot":"","sources":["../../src/debounced.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,SAAS,CACvB,IAA4C,EAC5C,OAAe;IAEf,IAAI,KAAU,CAAC;IACf,IAAI,QAA8C,CAAC;IACnD,IAAI,MAAkB,CAAC;IACvB,IAAI,KAAK,GAAY,IAAI,CAAC;IAE1B,OAAO,UAAU,GAAG,IAAW;QAC7B,IAAI,OAAO,GAAU,IAAI,CAAC;QAE1B,IAAI,KAAK,EAAE;YACT,MAAM,GAAG,IAAI,OAAO,CAAI,CAAC,OAAwB,EAAE,EAAE;gBACnD,KAAK,GAAG,KAAK,CAAC;gBACd,QAAQ,GAAG,OAAO,CAAC;YACrB,CAAC,CAAC;iBACC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACV,KAAK,GAAG,IAAI,CAAC;gBACb,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACf,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;SACN;QAED,IAAI,KAAK,EAAE;YACT,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,KAAK,GAAG,SAAS,CAAC;SACnB;QAED,KAAK,GAAG,UAAU,CAAC;YACjB,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,KAAK,GAAG,SAAS,CAAC;YAClB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QACtC,CAAC,EAAE,OAAO,CAAC,CAAC;QAEZ,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Function that wraps target function (```func```) and returns it.\n * As soon as wrapped function is called with some args it\n * postpones actual execution by ```backoff``` ms.\n * If wrapper is called again new args are been used and timer is restarted.\n *\n * @export\n * @template T\n * @param {((...args: any[]) => T | PromiseLike<T>)} func\n * @param {number} backoff\n * @returns {(...args: any[]) => Promise<T>}\n */\nexport function Debounced<T>(\n  func: (...args: any[]) => T | PromiseLike<T>,\n  backoff: number\n): (...args: any[]) => Promise<T> {\n  let timer: any;\n  let resolver: (result: T | PromiseLike<T>) => void;\n  let result: Promise<T>;\n  let renew: boolean = true;\n\n  return function (...args: any[]): Promise<T> {\n    let evtargs: any[] = args;\n\n    if (renew) {\n      result = new Promise<T>((resolve: typeof resolver) => {\n        renew = false;\n        resolver = resolve;\n      })\n        .then((v) => {\n          renew = true;\n          return v;\n        })\n        .catch((error) => {\n          renew = true;\n          throw error;\n        });\n    }\n\n    if (timer) {\n      clearTimeout(timer);\n      timer = undefined;\n    }\n\n    timer = setTimeout(function () {\n      clearTimeout(timer);\n      timer = undefined;\n      resolver(func.apply(func, evtargs));\n    }, backoff);\n\n    return result;\n  };\n}\n"]}